kube_config_file   = "~/.kube/config"
docker_config_file = "~/.docker/config.json"
kong_license_file  = "~/.kong_license"

kong_image = "kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:2.3.2.0-alpine"

super_admin_password   = "password"
kong_database_password = "kong"

kong_control_plane_config = {
  "KONG_ADMIN_LISTEN"             = "0.0.0.0:8001, 0.0.0.0:8444 ssl",
  "KONG_ADMIN_SSL_CERT_KEY"       = "/etc/secrets/kong-admin-api/tls.key",
  "KONG_ADMIN_SSL_CERT"           = "/etc/secrets/kong-admin-api/tls.crt",
  "KONG_ADMIN_GUI_SSL_CERT_KEY"   = "/etc/secrets/kong-admin-gui/tls.key",
  "KONG_ADMIN_GUI_SSL_CERT"       = "/etc/secrets/kong-admin-gui/tls.crt",
  "KONG_PORTAL_GUI_SSL_CERT_KEY"  = "/etc/secrets/kong-portal-gui/tls.key",
  "KONG_PORTAL_GUI_SSL_CERT"      = "/etc/secrets/kong-portal-gui/tls.crt",
  "KONG_PORTAL_API_SSL_CERT_KEY"  = "/etc/secrets/kong-portal-api/tls.key",
  "KONG_PORTAL_API_SSL_CERT"      = "/etc/secrets/kong-portal-api/tls.crt",
  "KONG_LOG_LEVEL"                = "debug",
  "KONG_ADMIN_GUI_AUTH"           = "basic-auth",
  "KONG_ADMIN_GUI_LISTEN"         = "0.0.0.0:8002, 0.0.0.0:8445 ssl",
  "KONG_ENFORCE_RBAC"             = "on",
  "KONG_PROXY_ACCESS_LOG"         = "/dev/stdout",
  "KONG_ADMIN_ACCESS_LOG"         = "/dev/stdout",
  "KONG_PROXY_ERROR_LOG"          = "/dev/stderr",
  "KONG_ADMIN_ERROR_LOG"          = "/dev/stderr",
  "KONG_PORTAL"                   = "on",
  "KONG_ADMIN_GUI_FLAGS"          = "{\"IMMUNITY_ENABLED\":true}",
  "KONG_PORTAL_GUI_LISTEN"        = "0.0.0.0:8003, 0.0.0.0:8446 ssl",
  "KONG_PORTAL_API_LISTEN"        = "0.0.0.0:8004, 0.0.0.0:8447 ssl",
  "KONG_PORTAL_GUI_PROTOCOL"      = "https",
  "KONG_PORTAL_AUTH"              = "basic-auth",
  "KONG_ANONYMOUS_REPORTS"        = "off",
  "KONG_ROLE"                     = "control_plane",
  "KONG_CLUSTER_CERT"             = "/etc/secrets/kong-cluster/tls.crt",
  "KONG_CLUSTER_CERT_KEY"         = "/etc/secrets/kong-cluster/tls.key",
  "KONG_CLUSTER_LISTEN"           = "0.0.0.0:8005 ssl",
  "KONG_CLUSTER_MTLS"             = "shared",
  "KONG_CLUSTER_TELEMETRY_LISTEN" = "0.0.0.0:8006 ssl",
  "KONG_STATUS_LISTEN"            = "0.0.0.0:8100",
  "KONG_STREAM_LISTEN"            = "off",
}

kong_data_plane_config = {
  "KONG_CLUSTER_CONTROL_PLANE"       = "kong-cluster.kong-hybrid-cp.svc.cluster.local:8005",
  "KONG_CLUSTER_TELEMETRY_ENDPOINT"  = "kong-cluster.kong-hybrid-cp.svc.cluster.local:8006",
  "KONG_ADMIN_ACCESS_LOG"            = "/dev/stdout",
  "KONG_PROXY_ACCESS_LOG"            = "/dev/stdout",
  "KONG_ADMIN_ACCESS_LOG"            = "/dev/stdout",
  "KONG_PROXY_ERROR_LOG"             = "/dev/stderr",
  "KONG_ADMIN_ERROR_LOG"             = "/dev/stderr",
  "KONG_ADMIN_GUI_LISTEN"            = "off",
  "KONG_ADMIN_LISTEN"                = "off",
  "KONG_CLUSTER_CERT"                = "/etc/secrets/kong-cluster/tls.crt",
  "KONG_CLUSTER_CERT_KEY"            = "/etc/secrets/kong-cluster/tls.key",
  "KONG_LUA_SSL_TRUSTED_CERTIFICATE" = "/etc/secrets/kong-cluster/tls.crt",
  "KONG_ROLE"                        = "data_plane",
  "KONG_CLUSTER_LISTEN"              = "off",
  "KONG_CLUSTER_MTLS"                = "shared",
  "KONG_CLUSTER_TELEMETRY_LISTEN"    = "off",
  "KONG_DATABASE"                    = "off",
  "KONG_LOG_LEVEL"                   = "debug",
  "KONG_LUA_PACKAGE_PATH"            = "/opt/?.lua;/opt/?/init.lua;;",
  "KONG_NGINX_WORKER_PROCESSES"      = "2",
  "KONG_PLUGINS"                     = "bundled",
  "KONG_PROXY_ACCESS_LOG"            = "/dev/stdout",
  "KONG_PROXY_ERROR_LOG"             = "/dev/stderr",
  "KONG_STREAM_LISTEN"               = "off"
  "KONG_PROXY_LISTEN"                = "0.0.0.0:8000, 0.0.0.0:8443",
  "KONG_STATUS_LISTEN"               = "0.0.0.0:8100",
  "KONG_SSL_CERT"                    = "/etc/secrets/kong-proxy/tls.crt",
  "KONG_SSL_CERT_KEY"                = "/etc/secrets/kong-proxy/tls.key",
}

#dp_lb_svcs = {
#  "kong-proxy" = {
#    namespace                   = "kong-hybrid-dp"
#    load_balancer_source_ranges = ["0.0.0.0/0"]
#    external_traffic_policy = "Local"
#    health_check_node_port  = 30001
#    annotations = {
#      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" = "http",
#      "service.beta.kubernetes.io/aws-load-balancer-ssl-cert"         = "<my-arn>",
#      "service.beta.kubernetes.io/aws-load-balancer-ssl-ports"        = "kong-proxy-ssl",
#      "service.beta.kubernetes.io/aws-load-balancer-security-groups"  = "<aws-security-group>"
#    }
#    ports = {
#      "kong-proxy-ssl" = {
#        port        = 8443
#        protocol    = "TCP"
#        target_port = 8000
#      }
#    }
#  }
#}


# Enable ingress below
#cp_ingress = {
#  "control-plane-ingress" = {
#    namespace = "kong-hybrid-cp"
#    annotations = {
#      "nginx.ingress.kubernetes.io/backend-protocol" = "HTTPS"
#    }
#    tls = {
#      hosts = [
#        "kong-control-plane.lan.local",
#        "kong-manager.lan.local",
#        "kong-admin.lan.local",
#        "kong-portal-gui.lan.local",
#        "kong-portal-admin.lan.local"
#      ]
#      secret_name = "kong-control-plane"
#    }
#    rules = {
#      "kong-manager" = {
#        host = "kong-manager.lan.local"
#        paths = {
#          "/" = {
#            service_name = "kong-api-man"
#            service_port = 8445
#          }
#        }
#      },
#      "kong-admin" = {
#        host = "kong-admin.lan.local"
#        paths = {
#          "/" = {
#            service_name = "kong-api-man"
#            service_port = 8444
#          }
#        }
#      },
#      "kong-portal-gui" = {
#        host = "kong-portal-gui.lan.local"
#        paths = {
#          "/" = {
#            service_name = "kong-portal"
#            service_port = 8446
#          }
#        }
#      },
#      "kong-portal-admin" = {
#        host = "kong-portal-admin.lan.local"
#        paths = {
#          "/" = {
#            service_name = "kong-portal"
#            service_port = 8447
#          }
#        }
#      }
#    }
#  }
#}
#
#dp_ingress = {
#  "data-plane-ingress" = {
#    namespace = "kong-hybrid-dp"
#    annotations = {
#      "nginx.ingress.kubernetes.io/backend-protocol" = "HTTPS"
#    }
#    tls = {
#      hosts = [
#        "kong-data-plane.lan.local",
#        "kong-proxy.lan.local"
#      ]
#      secret_name = "kong-data-plane"
#    }
#    rules = {
#      "kong-proxy" = {
#        host = "kong-proxy.lan.local"
#        paths = {
#          "/" = {
#            service_name = "kong-proxy"
#            service_port = 8443
#          }
#        }
#      }
#    }
#  }
#}

#tls_ingress = {
#  default = {
#    ca_common_name = "kong-ingress-ca"
#    namespaces     = ["kong-hybrid-cp", "kong-hybrid-dp"]
#    certificates = {
#      "kong-control-plane" = {
#        common_name = "kong-control-plane.lan.local"
#        namespaces  = ["kong-hybrid-cp"]
#        allowed_uses = [
#          "key_encipherment",
#          "digital_signature",
#        ]
#        dns_names = [
#          "kong-manager.lan.local",
#          "kong-admin.lan.local",
#          "kong-portal-gui.lan.local",
#          "kong-portal-admin.lan.local"
#        ]
#      },
#      "kong-data-plane" = {
#        common_name = "kong-data-plane.lan.local"
#        namespaces  = ["kong-hybrid-dp"]
#        allowed_uses = [
#          "key_encipherment",
#          "digital_signature",
#        ]
#        dns_names = [
#          "kong-proxy.lan.local"
#        ]
#      }
#    }
#  }
#}
